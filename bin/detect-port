#!/usr/bin/env node
/* ================================================================
 * detect-port by xdf(xudafeng[at]126.com)
 *
 * first created at : Tue Mar 17 2015 00:16:10 GMT+0800 (CST)
 *
 * ================================================================
 * Copyright 2013 xdf
 *
 * Licensed under the MIT License
 * You may not use this file except in compliance with the License.
 *
 * ================================================================ */

'use strict';

var co = require('co');
var fs = require('fs');
var path = require('path');
var program = require('commander');
var pkg = require('../package');

var options = {
  port: 8080,
  verbose: false
};

program
  .usage('[options] [arguments]')
  .option('-v, --versions', 'show version and exit')
  .option('-p, --port',     'set port for detect (default: 8080)')
  .option('--verbose',      'show more debugging information')
  .helpInformation = function() {
    return [
      '',
      '  \u001b[37m' + pkg.description + '\u001b[0m',
      '',
      '  Usage:',
      '    ' + this._name + ' or detect-port ' + this.usage(),
      '',
      '  Options:',
      '' + this.optionHelp().replace(/^/gm, '    '),
      '',
      '  Further help:',
      '',
      '    \u001b[4m' + pkg.homepage + '\u001b[0m',
      '',
      ''
    ].join('\n');
  };

program.parse(process.argv);

if (program.versions) {
  console.log('%s version: %s', pkg.name, pkg.version);
  process.exit(0);
}

var arg_0 = program.args[0];

if (program.port) {

  if (arg_0) {
    arg_0 = parseInt(arg_0);

    if (!arg_0 || typeof arg_0 !== 'number') {
      console.log('port should be a number');
      program.help();
    }
    options.port = arg_0;
  }
} else {

  if (arg_0) {
    console.log('invalid option: "%s"', arg_0);
    program.help();
  }
}

if (program.verbose) {
  options.verbose = true;
}

global.__detect = global.__detect || {};
global.__detect.options = options;

var detect = require('../lib');

co(function *(port) {
  var _port = yield detect(port);

  if (port === _port) {
    console.log('port: %d was not occupied', port);
  } else {
    console.log('port: %d was occupied, try port: %d', port, _port);
  }
})(options.port);
